---
version: '3.6'
    
services:
  zookeeper:
    image: confluentinc/cp-zookeeper
    volumes:
      - /home/nmaxime/pocs/data/zookeeper/data:/var/lib/zookeeper/data
      - /home/nmaxime/pocs/data/zookeeper/log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka
    volumes:
      - /home/nmaxime/pocs/data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_NUM_PARTITIONS: '12'
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_JMX_PORT: '9091'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.auth.SimpleAclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_REPLICA_FETCH_MAX_BYTES: 99048576
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 99048576
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 99048576
    links:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_KAFKASTORE_INIT_TIMEOUT_MS: '180000'
      SCHEMA_REGISTRY_KAFKASTORE_TIMEOUT_MS: '60000'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'

  connect:
    image: confluentinc/cp-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_PORT: '8083'
      CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'
      CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
      CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 99048576
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 99048576
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'

  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
              schema-registry:
                url: "http://schema-registry:8081"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 8055:8080
    links:
      - kafka
      - schema-registry

  pockafka-mysql:
    image: mysql:5.7
    restart: always
    container_name: pockafka-mysql
    environment:
      MYSQL_DATABASE: db_pockafka
      MYSQL_USER: pockafka-user
      MYSQL_PASSWORD: 5x7jG9M_/.gh956
      MYSQL_ROOT_PASSWORD: 5x7jG9M_/.gh956
      MYSQL_TCP_PORT: 3310
    ports:
      - "3310:3310"
    expose:
      - 3310
    
  pockafka-spring:
    depends_on:
      - pockafka-mysql
    image: pockafka-spring
    build:
      context: ../../src
      dockerfile: ./Dockerfile
      args:
        JAVA_OPTS: -Xms128M
    ports:
      - "8062:8062"
  
  mailslurper:
    image: marcopas/docker-mailslurper
    restart: always
    container_name: mailslurper
    ports:
      - 2500:2500
      - 8010:8010
      - 8015:8015
    volumes:
      - ./mailslurper-config.json:/opt/mailslurper/config.json